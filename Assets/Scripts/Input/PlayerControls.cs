//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Map Control"",
            ""id"": ""71dc44c9-3b09-424e-a7a4-4d6a7be2c641"",
            ""actions"": [
                {
                    ""name"": ""MoveMap"",
                    ""type"": ""Value"",
                    ""id"": ""043d4c2a-d471-41b9-b60d-89eb1e22d62d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""18a6e878-afd2-4869-b6ee-d46c829de4c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect"",
                    ""type"": ""Button"",
                    ""id"": ""77c1e1d1-2677-47fc-b9ca-a13e3e0bb9e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""26e31665-bb91-445d-94f2-1a8198b5938f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMap"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3a2ae00d-a1fe-49b2-9504-5dfc48d66add"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5bda2b8f-ca7f-4047-8aca-65de88cd4fe2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59dc7635-5008-4123-a362-c12f52651fc5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fc623083-070e-4209-9f6f-d03c79388c90"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""974077f4-56fe-4a36-9cf4-dd494d8cb43c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a67dfa7-e053-4508-a2f4-c6e030a19814"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map Control
        m_MapControl = asset.FindActionMap("Map Control", throwIfNotFound: true);
        m_MapControl_MoveMap = m_MapControl.FindAction("MoveMap", throwIfNotFound: true);
        m_MapControl_Interact = m_MapControl.FindAction("Interact", throwIfNotFound: true);
        m_MapControl_Inspect = m_MapControl.FindAction("Inspect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map Control
    private readonly InputActionMap m_MapControl;
    private IMapControlActions m_MapControlActionsCallbackInterface;
    private readonly InputAction m_MapControl_MoveMap;
    private readonly InputAction m_MapControl_Interact;
    private readonly InputAction m_MapControl_Inspect;
    public struct MapControlActions
    {
        private @PlayerControls m_Wrapper;
        public MapControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveMap => m_Wrapper.m_MapControl_MoveMap;
        public InputAction @Interact => m_Wrapper.m_MapControl_Interact;
        public InputAction @Inspect => m_Wrapper.m_MapControl_Inspect;
        public InputActionMap Get() { return m_Wrapper.m_MapControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapControlActions set) { return set.Get(); }
        public void SetCallbacks(IMapControlActions instance)
        {
            if (m_Wrapper.m_MapControlActionsCallbackInterface != null)
            {
                @MoveMap.started -= m_Wrapper.m_MapControlActionsCallbackInterface.OnMoveMap;
                @MoveMap.performed -= m_Wrapper.m_MapControlActionsCallbackInterface.OnMoveMap;
                @MoveMap.canceled -= m_Wrapper.m_MapControlActionsCallbackInterface.OnMoveMap;
                @Interact.started -= m_Wrapper.m_MapControlActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_MapControlActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_MapControlActionsCallbackInterface.OnInteract;
                @Inspect.started -= m_Wrapper.m_MapControlActionsCallbackInterface.OnInspect;
                @Inspect.performed -= m_Wrapper.m_MapControlActionsCallbackInterface.OnInspect;
                @Inspect.canceled -= m_Wrapper.m_MapControlActionsCallbackInterface.OnInspect;
            }
            m_Wrapper.m_MapControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveMap.started += instance.OnMoveMap;
                @MoveMap.performed += instance.OnMoveMap;
                @MoveMap.canceled += instance.OnMoveMap;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Inspect.started += instance.OnInspect;
                @Inspect.performed += instance.OnInspect;
                @Inspect.canceled += instance.OnInspect;
            }
        }
    }
    public MapControlActions @MapControl => new MapControlActions(this);
    public interface IMapControlActions
    {
        void OnMoveMap(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInspect(InputAction.CallbackContext context);
    }
}
